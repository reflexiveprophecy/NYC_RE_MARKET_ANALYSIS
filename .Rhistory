nyctotal %>%
filter(BOROUGH %in% input$BOROUGH &
BUILDING_CLASS_CATEGORY %in% input$BUILDING_CLASS_CATEGORY)
nyctotal %>%
filter(BOROUGH %in% 'MANHATTAN' &
BUILDING_CLASS_CATEGORY %in% '08 RENTALS - ELEVATOR APARTMENTS')
runApp()
runApp()
runApp()
nycsales %>%
select(BOROUGH, NEIGHBORHOOD, BUILDING_CLASS_CATEGORY, ADDRESS, GROSS_SQUARE_FEET, YEAR_BUILT, SALE_PRICE, SALE_DATE) %>%
filter(BOROUGH == input$pricebyborough) %>%
group_by(SALE_DATE, BOROUGH) %>%
summarise(Average_Sale_Price = mean(SALE_PRICE, na.rm = T)) %>%
arrange(SALE_DATE)
nycrollingsales = fread('nyc-rolling-sales.csv', stringsAsFactors = F, na.strings = c('', '-'))
nycoccupancy = read.csv('DOB_Certificate_Of_Occupancy.csv', stringsAsFactors = F)
nycoccupancy = nycoccupancy %>%
mutate(., LOT = as.integer(LOT)) %>%
mutate(., BOROUGH = toupper(BOROUGH))
nycoccupancy$BOROUGH[nycoccupancy$BOROUGH == 'STATEN ISLAND'] = 'STATEN_ISLAND'
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(SALE_PRICE)) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE))
nycsales = nycsales[,-1]
nycsales$SALE_DATE = as.Date(nycsales$SALE_DATE, '%m/%d/%y')
nycsales$SALE_DATE = format(nycsales$SALE_DATE, "%y/%m")
boroswitch = function(x){
switch(x, '1' = 'MANHATTAN', '2' = 'BRONX', '3' = 'BROOKLYN', '4' = 'QUEENS', '5' = 'STATEN_ISLAND')
}
nycsales$BOROUGH = sapply(nycsales$BOROUGH, boroswitch)
filteredbuildingclass = which(!(nycsales$BUILDING_CLASS_CATEGORY %in% excludebuildingclass))
nycsales = nycsales[filteredbuildingclass, ]
takeaddress = function(x){
for (i in x) {
return (i[1])
}
}
convertaddress = function(x){
switch(x,
MANHATTAN = ', New York, NY',
BRONX = ', BRONX, NY',
STATEN_ISLAND = ', STATEN ISLAND, NY',
QUEENS = ', QUEENS, NY',
BROOKLYN = ', BROOKLYN, NY')
}
fulladdress = sapply(nycsales$BOROUGH, convertaddress)
fulladdress
nycsales = nycsales %>%
mutate(ADDRESS = sapply(strsplit(nycsales$ADDRESS, ',', fixed = TRUE), takeaddress)) %>%
mutate(ADDRESS = paste(ADDRESS, fulladdress, ZIP_CODE))
nyctotal = inner_join(nycsales, nycoccupancy, by = c('BLOCK' = 'BLOCK', 'LOT' = 'LOT', 'BOROUGH' = 'BOROUGH'))
nyctotal = nyctotal %>% filter(!is.na(SALE_PRICE))
nyctotal = unique(nyctotal)
groupColors <- colorFactor(c("#E03A3C", "#009DDC","#62BB47"),
domain = c("Entire home/apt", "Private room","Shared room"))
BOROUGH = unique(nycsales$BOROUGH)
BUILDING_CLASS_CATEGORY = unique(nycsales$BUILDING_CLASS_CATEGORY)
NEIGHBORHOOD = unique(nycsales$NEIGHBORHOOD)
runApp()
runApp()
groupColors <- colorFactor(c("#E03A3C", "#009DDC","#62BB47"),
domain = c("Entire home/apt", "Private room","Shared room"))
groupColors
runApp()
runApp()
runApp()
runApp('~/Desktop/NYC Data Science Bootcamp/Week 2/shinyApps/leaflet')
runApp('~/Desktop/NYC Data Science Bootcamp/Week 2/shinyApps/leaflet')
runApp()
library(googleVis)
library(leaflet)
library(shiny)
library(maps)
Andrew
runApp()
View(nycsales)
runApp()
nyctotal %>%
filter(BOROUGH %in% 'MANHATTAN' &
BUILDING_CLASS_CATEGORY %in% '08 RENTALS - ELEVATOR APARTMENTS')
runApp()
runApp()
runApp()
runApp()
leaflet(nyctotal) %>%
addProviderTiles("Esri.WorldStreetMap") %>%
setView(lng = -73.9772, lat = 40.7527, zoom = 12)
View(nyctotal)
class(nyctotal)
class(nyctotal$LATITUDE)
class(nyctotal$LONGITUDE)
class(Andrew$Lat)
runApp()
runApp()
load(nycmap.RDA)
load("~/Desktop/NYC Data Science Bootcamp/Projects/Test Project/Test_Project/nycmap.rda")
head(nycmap)
leaflet(nycmap) %>%
addProviderTiles("Esri.WorldStreetMap") %>%
setView(lng = -73.9772, lat = 40.7527, zoom = 12)
runApp()
runApp()
runApp()
nrow(nyctotal$LATITUDE)
nrow(nyctotal$LONGITUDE)
class(nyctotal$LATITUDE)
class(nyctotal$LONGITUDE)
nyctotal = nyctotal %>% filter(!is.na(SALE_PRICE & !is.na(LATITUDE) & !is.na(LONGITUDE)))
nyctotal = unique(nyctotal)
View(nyctotal)
nrow(nyctotal$LATITUDE)
nrow(nyctotal$LONGITUDE)
nrow(nyctotal$BOROUGH)
nrow(nyctotal)
plot(nyctotal$LATITUDE, nyctotal$LONGITUDE)
head(nycmap)
write.csv(nyctotal, 'nyctotal.csv', row.names = F)
nyctotal = na.omit(nyctotal)
nyctotal = nyctotal %>% filter(!is.na(SALE_PRICE & !is.na(LATITUDE) & !is.na(LONGITUDE)))
nyctotal = unique(nyctotal)
View(nyctotal)
nyctotal = inner_join(nycsales, nycoccupancy, by = c('BLOCK' = 'BLOCK', 'LOT' = 'LOT', 'BOROUGH' = 'BOROUGH'))
View(nyctotal)
na.omit(nyctotal)
View(nyctotal)
nycoccupancy = read.csv('DOB_Certificate_Of_Occupancy.csv', stringsAsFactors = F, na.strings = c('NA'))
View(nycoccupancy)
na.omit(nycoccupancy)
nycoccupancy = nycoccupancy %>%
mutate(., LOT = as.integer(LOT)) %>%
mutate(., BOROUGH = toupper(BOROUGH))
na.omit(nycoccupancy)
nycoccupancy$BOROUGH[nycoccupancy$BOROUGH == 'STATEN ISLAND'] = 'STATEN_ISLAND'
nyctotal = inner_join(nycsales, nycoccupancy, by = c('BLOCK' = 'BLOCK', 'LOT' = 'LOT', 'BOROUGH' = 'BOROUGH'))
nyctotal = nyctotal %>% filter(!is.na(SALE_PRICE & !is.na(LATITUDE) & !is.na(LONGITUDE)))
nyctotal = unique(nyctotal)
View(nyctotal)
nyctotal = nyctotal[!is.na(as.numeric(nyctotal$LATITUDE)), ]
nyctotal = unique(nyctotal)
View(nyctotal)
nyctotal = nyctotal[!is.na(as.numeric(nyctotal$LONGITUDE)), ]
nyctotal = unique(nyctotal)
View(nyctotal)
runApp()
runApp()
runApp()
runApp()
write.csv(nyctotal, 'nyctotal.csv', row.names = F)
runApp()
nyctotal$LATITUDE
nyctotal$LONGITUDE
runApp()
runApp()
runApp()
library(leaflet)
leaflet() %>%
addTiles() %>%
#addProviderTiles("Esri.WorldStreetMap")
setView(lng = -73.9772, lat = 40.7527, zoom = 12)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('stringi')
install.packages("stringi")
library(stringi)
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(SALE_PRICE)) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE)) %>%
mutate(., ADDRESS = stri_trans_totitle(ADDRESS))
View(nycsales)
runApp()
runApp()
runApp()
runApp()
runApp()
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(format(SALE_PRICE, big.mark=",", trim=TRUE))) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE)) %>%
mutate(., ADDRESS = stri_trans_totitle(ADDRESS))
View(nycsales)
nycrollingsales$SALE_PRICE = format(nycrollingsales$SALE_PRICE, big.mark = ',', trim = T)
nycrollingsales$SALE_PRICE
nycrollingsales$SALE_PRICE = as.numeric(formatC(nycrollingsales$SALE_PRICE, format="d", big.mark=",")))
nycrollingsales$SALE_PRICE = as.numeric(formatC(nycrollingsales$SALE_PRICE, format="d", big.mark=","))
nycrollingsales$SALE_PRICE
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(formatC(SALE_PRICE, format="d", big.mark=","))) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE)) %>%
mutate(., ADDRESS = stri_trans_totitle(ADDRESS))
mutate(., SALE_PRICE = as.numeric(SALE_PRICE) %>%
nycsales = nycrollingsales %>%
nycsales = nycrollingsales %>%
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(SALE_PRICE)) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE)) %>%
mutate(., ADDRESS = stri_trans_totitle(ADDRESS))
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(SALE_PRICE)) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE)) %>%
mutate(., ADDRESS = stri_trans_totitle(ADDRESS))
nycsales = nycsales[,-1]
nycsales$SALE_DATE = as.Date(nycsales$SALE_DATE, '%m/%d/%y')
nycsales$SALE_DATE = format(nycsales$SALE_DATE, "%y/%m")
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(SALE_PRICE)) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE)) %>%
mutate(., ADDRESS = stri_trans_totitle(ADDRESS)) %>% nycsales[,-1]
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(SALE_PRICE)) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE)) %>%
mutate(., ADDRESS = stri_trans_totitle(ADDRESS))
nycsales = nycsales[,-1]
nycsales = nycsales[,-1]
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(SALE_PRICE)) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE)) %>%
mutate(., ADDRESS = stri_trans_totitle(ADDRESS))
nycsales = nycsales[,-1]
nycsales$SALE_DATE = as.Date(nycsales$SALE_DATE, '%m/%d/%y')
nycsales$SALE_DATE = format(nycsales$SALE_DATE, "%y/%m")
boroswitch = function(x){
switch(x, '1' = 'MANHATTAN', '2' = 'BRONX', '3' = 'BROOKLYN', '4' = 'QUEENS', '5' = 'STATEN_ISLAND')
}
nycsales$BOROUGH = sapply(nycsales$BOROUGH, boroswitch)
excludebuildingclass = c('29 COMMERCIAL GARAGES', '37 RELIGIOUS FACILITIES', '38 ASYLUMS AND HOMES', '44 CONDO PARKING', '28 COMMERCIAL CONDOS', '47 CONDO NON-BUSINESS STORAGE', '31 COMMERCIAL VACANT LAND', '41 TAX CLASS 4 - OTHER', '34 THEATRES',
'36 OUTDOOR RECREATIONAL FACILITIES', '32 HOSPITAL AND HEALTH FACILITIES', "42 CONDO CULTURAL/MEDICAL/EDUCATIONAL/ETC","33 EDUCATIONAL FACILITIES", "05 TAX CLASS 1 VACANT LAND", '06 TAX CLASS 1 - OTHER', '46 CONDO STORE BUILDINGS',
"35 INDOOR PUBLIC AND CULTURAL FACILITIES","40 SELECTED GOVERNMENTAL FACILITIES", "48 CONDO TERRACES/GARDENS/CABANAS", "11 SPECIAL CONDO BILLING LOTS", "39 TRANSPORTATION FACILITIES", '17 CONDO COOPS', '22 STORE BUILDINGS', '23 LOFT BUILDINGS', '11A CONDO-RENTALS')
filteredbuildingclass = which(!(nycsales$BUILDING_CLASS_CATEGORY %in% excludebuildingclass))
nycsales = nycsales[filteredbuildingclass, ]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nycsales %>%
select(BOROUGH, NEIGHBORHOOD, BUILDING_CLASS_CATEGORY, ADDRESS, GROSS_SQUARE_FEET, YEAR_BUILT, SALE_PRICE, SALE_DATE) %>%
filter(BOROUGH == input$numberbyborough) %>%
group_by(SALE_DATE, BOROUGH) %>%
summarise(Number_Of_Sale_Transactions = n()) %>%
arrange(SALE_DATE)
nycsales %>%
select(BOROUGH, NEIGHBORHOOD, BUILDING_CLASS_CATEGORY, ADDRESS, GROSS_SQUARE_FEET, YEAR_BUILT, SALE_PRICE, SALE_DATE) %>%
filter(BOROUGH == 'MANHATTAN') %>%
group_by(SALE_DATE, BOROUGH) %>%
summarise(Number_Of_Sale_Transactions = n()) %>%
arrange(SALE_DATE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nycsales %>% filter(BOROUGH == 'MANHATTAN' &
NEIGHBORHOOD == 'CHELSEA' &
BUILDING_CLASS_CATEGORY == '08 RENTALS - ELEVATOR APARTMENTS') %>%
group_by(SALE_DATE, BUILDING_CLASS_CATEGORY) %>%
summarise(Number_Of_Sale_Transactions = n()) %>%
arrange(SALE_DATE)
nycsales %>% filter(BOROUGH == 'MANHATTAN' &
NEIGHBORHOOD == 'CHELSEA' &
BUILDING_CLASS_CATEGORY == '07 RENTALS - WALKUP APARTMENTS') %>%
group_by(SALE_DATE, BUILDING_CLASS_CATEGORY) %>%
summarise(Number_Of_Sale_Transactions = n()) %>%
arrange(SALE_DATE)
runApp()
runApp('~/Desktop/NYC Data Science Bootcamp/Week 2/flights-4/flights_final')
runApp('~/Desktop/NYC Data Science Bootcamp/Week 2/flights-4/flights')
runApp()
runApp()
runApp()
nycrollingsales = fread('nyc-rolling-sales.csv', stringsAsFactors = F, na.strings = c('', '-'))
nycoccupancy = read.csv('DOB_Certificate_Of_Occupancy.csv', stringsAsFactors = F, na.strings = c('NA'))
nycoccupancy = nycoccupancy %>%
mutate(., LOT = as.integer(LOT)) %>%
mutate(., BOROUGH = toupper(BOROUGH))
na.omit(nycoccupancy)
nycrollingsales = fread('nyc-rolling-sales.csv', stringsAsFactors = F, na.strings = c('', '-'))
nycoccupancy = read.csv('DOB_Certificate_Of_Occupancy.csv', stringsAsFactors = F, na.strings = c('NA'))
nycoccupancy = nycoccupancy %>%
mutate(., LOT = as.integer(LOT)) %>%
mutate(., BOROUGH = toupper(BOROUGH))
nycoccupancy$BOROUGH[nycoccupancy$BOROUGH == 'STATEN ISLAND'] = 'STATEN_ISLAND'
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(SALE_PRICE)) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE)) %>%
mutate(., ADDRESS = stri_trans_totitle(ADDRESS))
nycsales = nycsales[,-1]
nycsales$SALE_DATE = as.Date(nycsales$SALE_DATE, '%m/%d/%y')
nycsales$SALE_DATE = format(nycsales$SALE_DATE, "%y/%m")
boroswitch = function(x){
switch(x, '1' = 'MANHATTAN', '2' = 'BRONX', '3' = 'BROOKLYN', '4' = 'QUEENS', '5' = 'STATEN_ISLAND')
}
nycsales$BOROUGH = sapply(nycsales$BOROUGH, boroswitch)
excludebuildingclass = c('29 COMMERCIAL GARAGES', '37 RELIGIOUS FACILITIES', '38 ASYLUMS AND HOMES', '44 CONDO PARKING', '28 COMMERCIAL CONDOS', '47 CONDO NON-BUSINESS STORAGE', '31 COMMERCIAL VACANT LAND', '41 TAX CLASS 4 - OTHER', '34 THEATRES',
'36 OUTDOOR RECREATIONAL FACILITIES', '32 HOSPITAL AND HEALTH FACILITIES', "42 CONDO CULTURAL/MEDICAL/EDUCATIONAL/ETC","33 EDUCATIONAL FACILITIES", "05 TAX CLASS 1 VACANT LAND", '06 TAX CLASS 1 - OTHER', '46 CONDO STORE BUILDINGS',
"35 INDOOR PUBLIC AND CULTURAL FACILITIES","40 SELECTED GOVERNMENTAL FACILITIES", "48 CONDO TERRACES/GARDENS/CABANAS", "11 SPECIAL CONDO BILLING LOTS", "39 TRANSPORTATION FACILITIES", '17 CONDO COOPS', '22 STORE BUILDINGS', '23 LOFT BUILDINGS', '11A CONDO-RENTALS')
filteredbuildingclass = which(!(nycsales$BUILDING_CLASS_CATEGORY %in% excludebuildingclass))
nycsales = nycsales[filteredbuildingclass, ]
rentalclass = c("07 RENTALS - WALKUP APARTMENTS", "08 RENTALS - ELEVATOR APARTMENTS", '14 RENTALS - 4-10 UNIT')
condoclass = c('12 CONDOS - WALKUP APARTMENTS', "13 CONDOS - ELEVATOR APARTMENTS", "15 CONDOS - 2-10 UNIT RESIDENTIAL", "16 CONDOS - 2-10 UNIT WITH COMMERCIAL UNIT", '04 TAX CLASS 1 CONDOS')
coopclass = c("09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS" )
singlefamilyclass = c('01 ONE FAMILY DWELLINGS')
multifamilyclass = c('02 TWO FAMILY DWELLINGS', '03 THREE FAMILY DWELLINGS')
officeclass = c('21 OFFICE BUILDINGS', '43 CONDO OFFICE BUILDINGS')
hotelclass = c('25 LUXURY HOTELS', '26 OTHER HOTELS', '45 CONDO HOTELS')
industrialclass = c('30 WAREHOUSES', '27 FACTORIES')
takeaddress = function(x){
for (i in x) {
return (i[1])
}
}
convertaddress = function(x){
switch(x,
MANHATTAN = ', New York, NY',
BRONX = ', BRONX, NY',
STATEN_ISLAND = ', STATEN ISLAND, NY',
QUEENS = ', QUEENS, NY',
BROOKLYN = ', BROOKLYN, NY')
}
fulladdress = sapply(nycsales$BOROUGH, convertaddress)
fulladdress
nycsales = nycsales %>%
mutate(ADDRESS = sapply(strsplit(nycsales$ADDRESS, ',', fixed = TRUE), takeaddress)) %>%
mutate(ADDRESS = paste(ADDRESS, fulladdress, ZIP_CODE))
nyctotal = inner_join(nycsales, nycoccupancy, by = c('BLOCK' = 'BLOCK', 'LOT' = 'LOT', 'BOROUGH' = 'BOROUGH'))
nyctotal = nyctotal %>% filter(!is.na(SALE_PRICE))
nyctotal = nyctotal[!is.na(as.numeric(nyctotal$LATITUDE)), ]
nyctotal = nyctotal[!is.na(as.numeric(nyctotal$LONGITUDE)), ]
nyctotal = unique(nyctotal)
BOROUGH = unique(nycsales$BOROUGH)
BOROUGH
NEIGHBORHOOD = unique(nycslaes$NEIGHBORHOOD)
NEIGHBORHOOD
BUILDING_CLASS_CATEGORY = unique(nycsales$BUILDING_CLASS_CATEGORY)
BUILDING_CLASS_CATEGORY
runApp()
NEIGHBORHOOD
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
numberborough = unique(nycsales$BOROUGH)
numberborough = unique(nycsales$BOROUGH)
numberborough = unique(nycsales$BOROUGH)
numberborough = unique(nycsales$BOROUGH)
numberneighborhood = unique(nycsales$NEIGHBORHOOD)
numberclasscategory = unique(nycsales$BUILDING_CLASS_CATEGORY)
runApp()
numberborough = unique(nycsales$BOROUGH)
numberneighborhood = unique(nycsales$NEIGHBORHOOD)
numberclasscategory = unique(nycsales$BUILDING_CLASS_CATEGORY)
numberborough
numberneighborhood
numberclasscategory
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(nycsales)
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(SALE_PRICE)) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE)) %>%
mutate(., ADDRESS = stri_trans_totitle(ADDRESS)) %>%
mutate(., BUILDING_CLASS_CATEGORY = BUILDING_CLASS_CATEGORY[4:])
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(SALE_PRICE)) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE)) %>%
mutate(., ADDRESS = stri_trans_totitle(ADDRESS)) %>%
mutate(., BUILDING_CLASS_CATEGORY = substr(BUILDING_CLASS_CATEGORY,4))
x = 'hello'
x[1:5]
x(1:5)
x[1]
x[1:2]
substr(x, 2,3)
substr(x, 2,2:)
substr(x, 2,10)
substr(x, 2,200)
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(SALE_PRICE)) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE)) %>%
mutate(., ADDRESS = stri_trans_totitle(ADDRESS)) %>%
mutate(., BUILDING_CLASS_CATEGORY = substr(BUILDING_CLASS_CATEGORY,4, 100))
View(nycsales)
runApp()
rsconnect::setAccountInfo(name='reflexiveprophecy', token='B8D877FA2FCA6FE21444DFE347350F20', secret='2IP2injVNvPPiLvHYi48bkkfjS/xfIXDU1XXbE8U')
rsconnect::setAccountInfo(name='reflexiveprophecy', token='B8D877FA2FCA6FE21444DFE347350F20', secret='2IP2injVNvPPiLvHYi48bkkfjS/xfIXDU1XXbE8U')
rsconnect::setAccountInfo(name='reflexiveprophecy', token='B8D877FA2FCA6FE21444DFE347350F20', secret='2IP2injVNvPPiLvHYi48bkkfjS/xfIXDU1XXbE8U')
rsconnect::setAccountInfo(name='reflexiveprophecy', token='E99FF662CC038BE325FD18056D8C72AB', secret='r19gEKFvXHLNkw0W1h5W2Z4z3bqGthQZ7GnDRUs8')
rsconnect::setAccountInfo(name='reflexiveprophecy', token='A3CB84B1DC0C869581753CDEF35B9F02', secret='yW3uPZvBdZLHgueLZEXmkpPgpifZ2pZWSn9gRGHd')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
datatemp = nycsales %>%
select(BOROUGH, NEIGHBORHOOD, BUILDING_CLASS_CATEGORY, ADDRESS, GROSS_SQUARE_FEET, YEAR_BUILT, SALE_PRICE, SALE_DATE) %>%
filter(BOROUGH == BOROUGH) %>%
group_by(SALE_DATE, BOROUGH) %>%
summarise(Median_Sale_Price = round(median(SALE_PRICE, na.rm = T)), 0) %>%
arrange(SALE_DATE)
plotlynycsales = ggplotly(ggplot(data = datatemp, aes(x = SALE_DATE, y = Median_Sale_Price)) +
geom_line() + xlab('Sale Date') + ylab('Median Sale Price'))
plotlynysales
plotlynycsales
datatemp
datatemp = nycsales %>%
select(BOROUGH, NEIGHBORHOOD, BUILDING_CLASS_CATEGORY, ADDRESS, GROSS_SQUARE_FEET, YEAR_BUILT, SALE_PRICE, SALE_DATE) %>%
filter(BOROUGH == 'BRONX') %>%
group_by(SALE_DATE, BOROUGH) %>%
summarise(Median_Sale_Price = round(median(SALE_PRICE, na.rm = T)), 0) %>%
arrange(SALE_DATE)
datatemp
plotlynycsales = ggplotly(ggplot(data = datatemp, aes(x = SALE_DATE, y = Median_Sale_Price)) +
geom_line() + xlab('Sale Date') + ylab('Median Sale Price'))
plotlynycsales
datatemp
plotlynycsales = ggplot(data = datatemp, aes(x = SALE_DATE, y = Median_Sale_Price)) +
geom_line() + xlab('Sale Date') + ylab('Median Sale Price')
plotlynycsales
plotlynycsales = ggplot(data = datatemp, aes(x = SALE_DATE, y = Median_Sale_Price, group = 1)) +
geom_line() + xlab('Sale Date') + ylab('Median Sale Price')
plotlynycsales
plotlynycsales = ggplot(data = datatemp, aes(x = SALE_DATE, y = Median_Sale_Price, group = 1)) +
geom_line(color = '#0BD4F8') + xlab('Sale Date') + ylab('Median Sale Price')
plotlynycsales
plotlynycsales = ggplotly(ggplot(data = datatemp, aes(x = SALE_DATE, y = Median_Sale_Price, group = 1)) +
geom_line(color = '#0BD4F8') + xlab('Sale Date') + ylab('Median Sale Price'))
plotlynycsales
runApp()
rsconnect::setAccountInfo(name='reflexiveprophecy',
token='3B29DBC2F56CF2308AE71797229CB25A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='reflexiveprophecy',token='3B29DBC2F56CF2308AE71797229CB25A',secret='<SECRET>')
runApp()
