1+1
library(rgl)
install.packages('rgl')
library(rgl)
rgl::plot3d(iris[,1:3])
rgl::plot3d(iris[,1:3], col = as.numeric(iris$Species))
## Packages
install.packages(c('bitops','RCurl','XML','dplyr','ggplot2'))
library(bitops)
library(RCurl)
library(XML)
library(dplyr)
library(ggplot2)
install.packages('rgl')
library(rgl)
rgl::plot3d(iris[,1:3])
rgl::plot3d(iris[,1:3], col = as.numeric(iris$Species))
by_opp = group_by(data, opp)
opp_points = summarise(by_opp, average_point_spread = mean(points-opp), average_win_ratios = mean(sum(win == 'W')/(sum(win == 'W') + sum(win == 'L'))))
g = ggplot(data = opp_points, aes(x = average_point_spread, y = average_win_ratios, fill = average_point_spread))
g + geom_point()
library(dplyr)
install.packages('dplyr')
install.packages("dplyr")
# Problem 2
by_visit = group_by(data, season, visiting)
by_visit
# Problem 2
by_visit = group_by(data, season, visiting)
by_opp = group_by(data, opp)
# Problem 2
by_visit = group_by(data, season, visiting)
# Problem 1
by_season = group_by(data, season)
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/Library/R/3.4/library")
library(dplyr)
# Problem 2
by_visit = group_by(data, season, visiting)
# Problem 1
by_season = group_by(data, season)
load("~/Desktop/R for Data Analysis/Knicks.rdata")
head(data, 20)
install.packages()
library(dplyr)
# Problem 1
by_season = group_by(data, season)
by_season
win_ratios = summarise(by_season, win_ratio = sum(win == 'W')/(sum(win == 'W') + sum(win == 'L')))
win_ratios
g = ggplot(data = win_ratios, aes(x = season, y = win_ratio))
g + geom_bar(stat = 'identity')
library("ggplot2", lib.loc="~/Library/R/3.4/library")
win_ratios = summarise(by_season, win_ratio = sum(win == 'W')/(sum(win == 'W') + sum(win == 'L')))
win_ratios
g = ggplot(data = win_ratios, aes(x = season, y = win_ratio))
g + geom_bar(stat = 'identity')
# Problem 2
by_visit = group_by(data, season, visiting)
by_visit
visits = summarise(by_visit, win_ratio = sum(win == 'W')/(sum(win == 'W') + sum(win == 'L')))
by_opp = group_by(data, opp)
opp_points = summarise(by_opp, average_point_spread = mean(points-opp), average_win_ratios = mean(sum(win == 'W')/(sum(win == 'W') + sum(win == 'L'))))
g = ggplot(data = opp_points, aes(x = average_point_spread, y = average_win_ratios, fill = average_point_spread))
g + geom_point()
g + geom_point(color = opp)
by_opp = group_by(data, opp)
opp_points = summarise(by_opp, average_point_spread = mean(points-opp), average_win_ratios = sum(win == 'W')/(sum(win == 'W') + sum(win == 'L')))
g = ggplot(data = opp_points, aes(x = average_point_spread, y = average_win_ratios))
g + geom_point(color = opp)
g + geom_point(color = opponent)
head(data)
g + geom_point(color = average_point_spread)
by_opp = group_by(data, opp)
opp_points = summarise(by_opp, average_point_spread = mean(points-opp), average_win_ratios = sum(win == 'W')/(sum(win == 'W') + sum(win == 'L')))
g = ggplot(data = opp_points, aes(x = average_point_spread, y = average_win_ratios))
g + geom_point(color = average_point_spread)
g + geom_point(color = opp_points)
g + geom_point(color = average_win_ratios)
g + geom_point(aes(color = average_win_ratios))
load("~/Desktop/R for Data Analysis/Knicks.rdata")
head(data, 20)
# Problem 1
by_season = group_by(data, season)
by_season
win_ratios = summarise(by_season, win_ratio = sum(win == 'W')/(sum(win == 'W') + sum(win == 'L')))
win_ratios
g = ggplot(data = win_ratios, aes(x = season, y = win_ratio))
g + geom_bar(stat = 'identity')
# Problem 2
by_visit = group_by(data, season, visiting)
by_visit
visits = summarise(by_visit, win_ratio = sum(win == 'W')/(sum(win == 'W') + sum(win == 'L')))
visits
g = ggplot(data = visits, aes(x = visiting, y = win_ratio, fill = win_ratio))
g + geom_bar(stat = 'identity') + facet_wrap(~season)
# Problem 3
g = ggplot(data = data, aes(x = points))
g + geom_histogram(binwidth = 5) + facet_wrap(~season)
by_opp = group_by(data, opp)
opp_points = summarise(by_opp, average_point_spread = mean(points-opp), average_win_ratios = sum(win == 'W')/(sum(win == 'W') + sum(win == 'L')))
g = ggplot(data = opp_points, aes(x = average_point_spread, y = average_win_ratios))
g + geom_point(aes(color = average_win_ratios))
head(data)
addinslist:::addinslistAddin()
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
head(temp)
summary(temp)
head(temp)
head(temp, 5)
temp
temp
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
head(temp)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
head(temp)
summary(temp)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = F)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = F)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = T)
head(temp)
summary(temp)
temp
View(temp)
plot(density(temp$Body.Temp))
plot(density(temp$Body.Temp))
head(temp)
summary(temp)
plot(density(temp$Body.Temp))
plot(density(temp$Body.Temp))
plot(density(temp$Body.Temp))
devtools::install_github('hadley/ggplot2')
devtools::install_github('hadley/ggplot2')
library(ggplot2)
devtools::install_github('hadley/ggplot2')
force = TRUE
devtools::install_github('hadley/ggplot2')
devtools::install_github('hadley/ggplot2', force = TRUE)
# convert matrix to dataframe
library(dygraphs)
library(ggplot2)
library(readr)
library(plotly)
nycrollingsales = fread('nyc-rolling-sales.csv', stringsAsFactors = F, na.strings = c('', '-'))
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(SALE_PRICE)) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE))
nycsales = nycsales[,-1]
nycsales$SALE_DATE = as.Date(nycsales$SALE_DATE, '%m/%d/%y')
nycsales$SALE_DATE = format(nycsales$SALE_DATE, "%y/%m")
boroswitch = function(x){
switch(x, '1' = 'MANHATTAN', '2' = 'BRONX', '3' = 'BROOKLYN', '4' = 'QUEENS', '5' = 'STATEN_ISLAND')
}
nycsales$BOROUGH = sapply(nycsales$BOROUGH, boroswitch)
excludebuildingclass = c('29 COMMERCIAL GARAGES', '37 RELIGIOUS FACILITIES', '38 ASYLUMS AND HOMES', '44 CONDO PARKING', '28 COMMERCIAL CONDOS', '47 CONDO NON-BUSINESS STORAGE', '31 COMMERCIAL VACANT LAND', '41 TAX CLASS 4 - OTHER', '34 THEATRES',
'36 OUTDOOR RECREATIONAL FACILITIES', '32 HOSPITAL AND HEALTH FACILITIES', "42 CONDO CULTURAL/MEDICAL/EDUCATIONAL/ETC","33 EDUCATIONAL FACILITIES", "05 TAX CLASS 1 VACANT LAND", '06 TAX CLASS 1 - OTHER', '46 CONDO STORE BUILDINGS',
"35 INDOOR PUBLIC AND CULTURAL FACILITIES","40 SELECTED GOVERNMENTAL FACILITIES", "48 CONDO TERRACES/GARDENS/CABANAS", "11 SPECIAL CONDO BILLING LOTS", "39 TRANSPORTATION FACILITIES", '17 CONDO COOPS', '22 STORE BUILDINGS', '23 LOFT BUILDINGS', '11A CONDO-RENTALS')
excludebuildingclass
filteredbuildingclass = which(!(nycsales$BUILDING_CLASS_CATEGORY %in% excludebuildingclass))
nycsales = nycsales[filteredbuildingclass, ]
unique(nycsales$BUILDING_CLASS_CATEGORY)
rentalclass = c("07 RENTALS - WALKUP APARTMENTS", "08 RENTALS - ELEVATOR APARTMENTS", '14 RENTALS - 4-10 UNIT')
condoclass = c('12 CONDOS - WALKUP APARTMENTS', "13 CONDOS - ELEVATOR APARTMENTS", "15 CONDOS - 2-10 UNIT RESIDENTIAL", "16 CONDOS - 2-10 UNIT WITH COMMERCIAL UNIT", '04 TAX CLASS 1 CONDOS')
coopclass = c("09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS" )
singlefamilyclass = c('01 ONE FAMILY DWELLINGS')
multifamilyclass = c('02 TWO FAMILY DWELLINGS', '03 THREE FAMILY DWELLINGS')
officeclass = c('21 OFFICE BUILDINGS', '43 CONDO OFFICE BUILDINGS')
hotelclass = c('25 LUXURY HOTELS', '26 OTHER HOTELS', '45 CONDO HOTELS')
industrialclass = c('30 WAREHOUSES', '27 FACTORIES')
unlist(strsplit(nycsales$ADDRESS, ','))
nycgroupchart = nycsales %>%
group_by(SALE_DATE, BOROUGH) %>%
summarise(averagesaleprice = mean(SALE_PRICE, na.rm = T)) %>%
arrange(SALE_DATE) %>%
ggplot(., aes(x = SALE_DATE, y = averagesaleprice)) +
geom_bar(stat = 'identity', aes(fill = BOROUGH))
nycgroupchart
ggnycsales = ggplot(nycgroup, aes(x = SALE_DATE, y = averagesaleprice)) + geom_bar(stat = 'identity', aes(fill = BOROUGH))
plotlynycsales = ggplotly(ggnycsales)
plotlynycsales
ggnycsales = ggplot(nycgroup, aes(x = SALE_DATE, y = averagesaleprice)) + geom_bar(stat = 'identity', aes(fill = BOROUGH))
ggnycsales = ggplot(nycgroupchart, aes(x = SALE_DATE, y = averagesaleprice)) + geom_bar(stat = 'identity', aes(fill = BOROUGH))
nycgroupchart = nycsales %>%
group_by(SALE_DATE, BOROUGH) %>%
summarise(averagesaleprice = mean(SALE_PRICE, na.rm = T)) %>%
arrange(SALE_DATE) %>%
ggplot(., aes(x = SALE_DATE, y = averagesaleprice)) +
geom_bar(stat = 'identity', aes(fill = BOROUGH))
nycsales = nycsales[filteredbuildingclass, ]
nycrollingsales = fread('nyc-rolling-sales.csv', stringsAsFactors = F, na.strings = c('', '-'))
library(data.table)
nycrollingsales = fread('nyc-rolling-sales.csv', stringsAsFactors = F, na.strings = c('', '-'))
setwd("~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny")
nycrollingsales = fread('nyc-rolling-sales.csv', stringsAsFactors = F, na.strings = c('', '-'))
setwd("~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/datasets")
nycrollingsales = fread('nyc-rolling-sales.csv', stringsAsFactors = F, na.strings = c('', '-'))
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(SALE_PRICE)) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE))
nycsales = nycsales[,-1]
nycsales$SALE_DATE = as.Date(nycsales$SALE_DATE, '%m/%d/%y')
nycsales$SALE_DATE = format(nycsales$SALE_DATE, "%y/%m")
View(nycsales)
unique(nycsales$BUILDING_CLASS_CATEGORY)
unique(nycsales$NEIGHBORHOOD)
boroswitch = function(x){
switch(x, '1' = 'MANHATTAN', '2' = 'BRONX', '3' = 'BROOKLYN', '4' = 'QUEENS', '5' = 'STATEN_ISLAND')
}
nycsales$BOROUGH = sapply(nycsales$BOROUGH, boroswitch)
excludebuildingclass = c('29 COMMERCIAL GARAGES', '37 RELIGIOUS FACILITIES', '38 ASYLUMS AND HOMES', '44 CONDO PARKING', '28 COMMERCIAL CONDOS', '47 CONDO NON-BUSINESS STORAGE', '31 COMMERCIAL VACANT LAND', '41 TAX CLASS 4 - OTHER', '34 THEATRES',
'36 OUTDOOR RECREATIONAL FACILITIES', '32 HOSPITAL AND HEALTH FACILITIES', "42 CONDO CULTURAL/MEDICAL/EDUCATIONAL/ETC","33 EDUCATIONAL FACILITIES", "05 TAX CLASS 1 VACANT LAND", '06 TAX CLASS 1 - OTHER', '46 CONDO STORE BUILDINGS',
"35 INDOOR PUBLIC AND CULTURAL FACILITIES","40 SELECTED GOVERNMENTAL FACILITIES", "48 CONDO TERRACES/GARDENS/CABANAS", "11 SPECIAL CONDO BILLING LOTS", "39 TRANSPORTATION FACILITIES", '17 CONDO COOPS', '22 STORE BUILDINGS', '23 LOFT BUILDINGS', '11A CONDO-RENTALS')
excludebuildingclass
filteredbuildingclass = which(!(nycsales$BUILDING_CLASS_CATEGORY %in% excludebuildingclass))
nycsales = nycsales[filteredbuildingclass, ]
unique(nycsales$BUILDING_CLASS_CATEGORY)
rentalclass = c("07 RENTALS - WALKUP APARTMENTS", "08 RENTALS - ELEVATOR APARTMENTS", '14 RENTALS - 4-10 UNIT')
condoclass = c('12 CONDOS - WALKUP APARTMENTS', "13 CONDOS - ELEVATOR APARTMENTS", "15 CONDOS - 2-10 UNIT RESIDENTIAL", "16 CONDOS - 2-10 UNIT WITH COMMERCIAL UNIT", '04 TAX CLASS 1 CONDOS')
coopclass = c("09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS" )
singlefamilyclass = c('01 ONE FAMILY DWELLINGS')
multifamilyclass = c('02 TWO FAMILY DWELLINGS', '03 THREE FAMILY DWELLINGS')
officeclass = c('21 OFFICE BUILDINGS', '43 CONDO OFFICE BUILDINGS')
hotelclass = c('25 LUXURY HOTELS', '26 OTHER HOTELS', '45 CONDO HOTELS')
industrialclass = c('30 WAREHOUSES', '27 FACTORIES')
unlist(strsplit(nycsales$ADDRESS, ','))
View(nycsales)
nycgroupchart = nycsales %>%
group_by(SALE_DATE, BOROUGH) %>%
summarise(averagesaleprice = mean(SALE_PRICE, na.rm = T)) %>%
arrange(SALE_DATE) %>%
ggplot(., aes(x = SALE_DATE, y = averagesaleprice)) +
geom_bar(stat = 'identity', aes(fill = BOROUGH))
nycgroupchart
ggnycsales = ggplot(nycgroupchart, aes(x = SALE_DATE, y = averagesaleprice)) + geom_bar(stat = 'identity', aes(fill = BOROUGH))
plotlynycsales = ggplotly(ggnycsales)
plotlynycsales
plotlynycsales
ggnycsales = ggplot(nycgroupchart, aes(x = SALE_DATE, y = averagesaleprice)) + geom_bar(stat = 'identity', aes(fill = BOROUGH))
library(ggplot2)
library(readr)
library(plotly)
ggnycsales = ggplot(nycgroupchart, aes(x = SALE_DATE, y = averagesaleprice)) + geom_bar(stat = 'identity', aes(fill = BOROUGH))
nycgroupchart
nycgroup = nycsales %>%
group_by(SALE_DATE, BOROUGH) %>%
summarise(averagesaleprice = mean(SALE_PRICE, na.rm = T)) %>%
arrange(SALE_DATE)
nycgroupchart
ggnycsales = ggplot(nyc, aes(x = SALE_DATE, y = averagesaleprice)) + geom_bar(stat = 'identity', aes(fill = BOROUGH))
ggnycsales = ggplot(nycgroup, aes(x = SALE_DATE, y = averagesaleprice)) + geom_bar(stat = 'identity', aes(fill = BOROUGH))
plotlynycsales = ggplotly(ggnycgroupchart)
plotlynycsales = ggplotly(ggnycsales)
plotlynycsales
shiny::runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Week 3/shiny_demo/shiny_csv')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Week 2/shinyApps/shinyDashBoard')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
nycgroup = nycsales %>%
select(BOROUGH, NEIGHBORHOOD, BUILDING_CLASS_CATEGORY, ADDRESS, GROSS_SQUARE_FEET, YEAR_BUILT, SALE_PRICE, SALE_DATE)
nycgroup = nycsales %>%
select(BOROUGH, NEIGHBORHOOD, BUILDING_CLASS_CATEGORY, ADDRESS, GROSS_SQUARE_FEET, YEAR_BUILT, SALE_PRICE, SALE_DATE) %>%
group_by(SALE_DATE, BOROUGH) %>%
summarise(averagesaleprice = mean(SALE_PRICE, na.rm = T)) %>%
arrange(SALE_DATE)
nycgroup = nycsales %>%
select(BOROUGH, NEIGHBORHOOD, BUILDING_CLASS_CATEGORY, ADDRESS, GROSS_SQUARE_FEET, YEAR_BUILT, SALE_PRICE, SALE_DATE) %>%
group_by(SALE_DATE, BOROUGH) %>%
summarise(averagesaleprice = mean(SALE_PRICE, na.rm = T)) %>%
arrange(SALE_DATE)
View(nycgroup)
nycgroup = nycsales %>%
select(BOROUGH, NEIGHBORHOOD, BUILDING_CLASS_CATEGORY, ADDRESS, GROSS_SQUARE_FEET, YEAR_BUILT, SALE_PRICE, SALE_DATE) %>%
group_by(SALE_DATE, BOROUGH) %>%
summarise(averagesaleprice = mean(SALE_PRICE, na.rm = T)) %>%
arrange(SALE_DATE)
View(nycgroup)
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
BOROUGH = unique(nycsales$BOROUGH)
BUILDINGCLASS = unique(nycsales$BUILDING_CLASS_CATEGORY)
NEIGHBORHOOD = unique(nycsales$NEIGHBORHOOD)
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
BOROUGH
nycsales$BOROUGH = sapply(nycsales$BOROUGH, boroswitch)
excludebuildingclass = c('29 COMMERCIAL GARAGES', '37 RELIGIOUS FACILITIES', '38 ASYLUMS AND HOMES', '44 CONDO PARKING', '28 COMMERCIAL CONDOS', '47 CONDO NON-BUSINESS STORAGE', '31 COMMERCIAL VACANT LAND', '41 TAX CLASS 4 - OTHER', '34 THEATRES',
'36 OUTDOOR RECREATIONAL FACILITIES', '32 HOSPITAL AND HEALTH FACILITIES', "42 CONDO CULTURAL/MEDICAL/EDUCATIONAL/ETC","33 EDUCATIONAL FACILITIES", "05 TAX CLASS 1 VACANT LAND", '06 TAX CLASS 1 - OTHER', '46 CONDO STORE BUILDINGS',
"35 INDOOR PUBLIC AND CULTURAL FACILITIES","40 SELECTED GOVERNMENTAL FACILITIES", "48 CONDO TERRACES/GARDENS/CABANAS", "11 SPECIAL CONDO BILLING LOTS", "39 TRANSPORTATION FACILITIES", '17 CONDO COOPS', '22 STORE BUILDINGS', '23 LOFT BUILDINGS', '11A CONDO-RENTALS')
excludebuildingclass
filteredbuildingclass = which(!(nycsales$BUILDING_CLASS_CATEGORY %in% excludebuildingclass))
nycsales = nycsales[filteredbuildingclass, ]
unique(nycsales$BUILDING_CLASS_CATEGORY)
rentalclass = c("07 RENTALS - WALKUP APARTMENTS", "08 RENTALS - ELEVATOR APARTMENTS", '14 RENTALS - 4-10 UNIT')
condoclass = c('12 CONDOS - WALKUP APARTMENTS', "13 CONDOS - ELEVATOR APARTMENTS", "15 CONDOS - 2-10 UNIT RESIDENTIAL", "16 CONDOS - 2-10 UNIT WITH COMMERCIAL UNIT", '04 TAX CLASS 1 CONDOS')
coopclass = c("09 COOPS - WALKUP APARTMENTS", "10 COOPS - ELEVATOR APARTMENTS" )
singlefamilyclass = c('01 ONE FAMILY DWELLINGS')
multifamilyclass = c('02 TWO FAMILY DWELLINGS', '03 THREE FAMILY DWELLINGS')
officeclass = c('21 OFFICE BUILDINGS', '43 CONDO OFFICE BUILDINGS')
hotelclass = c('25 LUXURY HOTELS', '26 OTHER HOTELS', '45 CONDO HOTELS')
industrialclass = c('30 WAREHOUSES', '27 FACTORIES')
BOROUGH = unique(nycsales$BOROUGH)
BUILDINGCLASS = unique(nycsales$BUILDING_CLASS_CATEGORY)
NEIGHBORHOOD = unique(nycsales$NEIGHBORHOOD)
BOROUGH
nycsales = nycsales[filteredbuildingclass, ]
View(nycsales)
nycrollingsales = fread('nyc-rolling-sales.csv', stringsAsFactors = F, na.strings = c('', '-'))
nycsales = nycrollingsales %>%
filter(., SALE_PRICE != 'NA') %>%
mutate(., SALE_PRICE = as.numeric(SALE_PRICE)) %>%
mutate(., BOROUGH = as.character(BOROUGH)) %>%
filter(., SALE_PRICE > 100000) %>%
filter(., ZIP_CODE != 0) %>%
mutate(., SALE_DATE = gsub('0:00', '', SALE_DATE))
nycsales = nycsales[,-1]
nycsales$SALE_DATE = as.Date(nycsales$SALE_DATE, '%m/%d/%y')
nycsales$SALE_DATE = format(nycsales$SALE_DATE, "%y/%m")
View(nycsales)
boroswitch = function(x){
switch(x, '1' = 'MANHATTAN', '2' = 'BRONX', '3' = 'BROOKLYN', '4' = 'QUEENS', '5' = 'STATEN_ISLAND')
}
nycsales$BOROUGH = sapply(nycsales$BOROUGH, boroswitch)
View(nycsales)
excludebuildingclass = c('29 COMMERCIAL GARAGES', '37 RELIGIOUS FACILITIES', '38 ASYLUMS AND HOMES', '44 CONDO PARKING', '28 COMMERCIAL CONDOS', '47 CONDO NON-BUSINESS STORAGE', '31 COMMERCIAL VACANT LAND', '41 TAX CLASS 4 - OTHER', '34 THEATRES',
'36 OUTDOOR RECREATIONAL FACILITIES', '32 HOSPITAL AND HEALTH FACILITIES', "42 CONDO CULTURAL/MEDICAL/EDUCATIONAL/ETC","33 EDUCATIONAL FACILITIES", "05 TAX CLASS 1 VACANT LAND", '06 TAX CLASS 1 - OTHER', '46 CONDO STORE BUILDINGS',
"35 INDOOR PUBLIC AND CULTURAL FACILITIES","40 SELECTED GOVERNMENTAL FACILITIES", "48 CONDO TERRACES/GARDENS/CABANAS", "11 SPECIAL CONDO BILLING LOTS", "39 TRANSPORTATION FACILITIES", '17 CONDO COOPS', '22 STORE BUILDINGS', '23 LOFT BUILDINGS', '11A CONDO-RENTALS')
filteredbuildingclass = which(!(nycsales$BUILDING_CLASS_CATEGORY %in% excludebuildingclass))
nycsales = nycsales[filteredbuildingclass, ]
View(nycsales)
BOROUGH = unique(nycsales$BOROUGH)
BUILDINGCLASS = unique(nycsales$BUILDING_CLASS_CATEGORY)
NEIGHBORHOOD = unique(nycsales$NEIGHBORHOOD)
BOROUGH
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
library(ggthemes)
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
ggnycsales = ggplot(nycgroup, aes(x = SALE_DATE, y = averagesaleprice)) + geom_bar(stat = 'identity')+ theme_few() + scale_fill_few()
ggnycsales
ggnycsales = ggplot(nycgroup, aes(x = SALE_DATE, y = averagesaleprice)) + geom_bar(stat = 'identity')+ theme_few()
ggnycsales
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
ggnycsales = ggplot(nycgroup, aes(x = SALE_DATE, y = averagesaleprice)) + geom_bar(stat = 'identity')+ theme_economist() + scale_fill_economist()
ggnycsales
plotlynycsales = ggplotly(ggnycsales)
plotlynycsales
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Week 3/shiny_demo/shiny_csv')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
BUILDING_CLASS_CATEGORY = unique(nycsales$BUILDING_CLASS_CATEGORY)
NEIGHBORHOOD = unique(nycsales$NEIGHBORHOOD)
BOROUGH = unique(nycsales$BOROUGH)
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
ggnycsales = ggplot(nycgroup, aes(x = SALE_DATE, y = Average_Sale_Price)) + geom_bar(stat = 'identity')+ theme_economist() + scale_fill_economist()
ggnycsales
plotlynycsales = ggplotly(ggnycsales)
ggnycsales
nycgroup = nycsales %>%
select(BOROUGH, NEIGHBORHOOD, BUILDING_CLASS_CATEGORY, ADDRESS, GROSS_SQUARE_FEET, YEAR_BUILT, SALE_PRICE, SALE_DATE) %>%
filter(BOROUGH == input$pricebyborough) %>%
group_by(SALE_DATE, BOROUGH) %>%
summarise(Average_Sale_Price = mean(SALE_PRICE, na.rm = T)) %>%
arrange(SALE_DATE)
runApp('~/Desktop/NYC Data Science Bootcamp/Projects/Data Visualization & Shiny/Shiny_App')
